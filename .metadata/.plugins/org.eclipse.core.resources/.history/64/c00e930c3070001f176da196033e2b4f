package com.example.tronics.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Service;

import com.example.tronics.model.User;
import com.example.tronics.repository.UserRepository;

@Service
public class UserService {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private UserRepository userRepository;

    public User createUser(String username, String password, String role) {
        // Ensure password is encoded before saving
        User user = new User(username, password, role);
        return userRepository.save(user);
    }

    public String verify(User user) {
        try {
            // Load the user from the database to ensure it exists
            User storedUser = userRepository.findByUsername(user.getUsername());
            if (storedUser == null) {
                return "fail"; // User not found
            }

            // Authenticate using the AuthenticationManager
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(user.getUsername(), user.getPassword()));
            
            if (authentication.isAuthenticated()) {
                return "success";
            }
        } catch (AuthenticationException e) {
            return "fail"; // Authentication failed
        }
        return "fail"; // Return fail if not authenticated
    }
}
